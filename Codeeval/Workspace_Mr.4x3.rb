------------------->>./__pycache__/__init__.cpython-34.pyc<<--------------------
This is Generated By Text File Concatinator V0.3 By Mr.4x3
 Get Latest of this Script at http://doyl.in/scripts
------------------------------->>./COOKMACH.py<<--------------------------------
t=int(input())

def cm(q,r):
    ans=0
    if q==r:
        ans=0
    else:
        while q!=r:
            if q==1:
                while q!=r:
                    q=q*2
                    ans=ans+1
                    continue
            elif q%2==0 and r>q:
                q=q*2
                ans=ans+1
                continue
            elif q%2==0 and r<q:
                q=q/2
                ans=ans+1
                continue

            else:
                q=(q-1)/2
                ans=ans+1
                continue
    return ans


for i in range(t):
    q,r=input().strip().split()
    q,r=int(q),int(r)
    print(cm(q,r))

--------------------------------->>./hello.rb<<---------------------------------
print"hello"
print"\n"
z=0
arry=['cool',"high",8,0,]
puts arry
print arry
for i in 2..9
  p i
end
for i in arry
  p i
end
puts 9

----------------------------->>./Codeeval/163.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

CHAR = [
	'-**----*--***--***---*---****--**--****--**---**--',
	'*--*--**-----*----*-*--*-*----*-------*-*--*-*--*-',
	'*--*---*---**---**--****-***--***----*---**---***-',
	'*--*---*--*-------*----*----*-*--*--*---*--*----*-',
	'-**---***-****-***-----*-***---**---*----**---**--',
	'--------------------------------------------------']
width=5
height=6


for test in test_cases:
    digits=[]
    for i in test:
        if i.isdigit():
            digits.append(i)
    x=''
    for i in range(height):
        for j in digits:
            index=int(j)*width
            x=x+CHAR[i][index:index+5]
        x=x+'\n'
    print(x,end='')






------------------------------>>./Codeeval/67.py<<------------------------------
import sys



with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    print(int(test, base=16))

----------------------------->>./Codeeval/100.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    i=int(test)
    if i%2==0:
        print(1)
    else:
        print(0)


------------------------------>>./Codeeval/99.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    l=[int(i) for i in test.replace('(','').replace(', ',' ').replace(') ',' ').replace(')','').split()]
    x=((l[0]-l[2])**2+(l[1]-l[3])**2)**.5
    print(int(x))


----------------------------->>./Codeeval/149.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    t=test.split()
    k=[t[i] for i in range(len(t)) if i%2]
    l=[t[i] for i in range(len(t)) if not i%2]
    x=''
    for i in range(len(k)):
        if l[i]=='00':
            x=x+k[i].replace('0','1')
        else:
            x=x+k[i]
    print(int(x,2))

----------------------------->>./Codeeval/136.py<<------------------------------
import sys
import collections

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()
print(list(enumerate(test_cases)))

------------------------------>>./Codeeval/30.py<<------------------------------
import sys

def inter(x,y):
    copy=[]
    for i in x:
        for j in y:
            if i==j:
                copy.append(j)

    return copy


with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    r,t=test.split(';')
    r,t=[int(i) for i in r.split(',')], [int(i) for i in t.split(',')]
    c=[str(i) for i in inter(r,t)]
    print(','.join(c))

----------------------------->>./Codeeval/160.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    f=float(test)
    h=int(f)
    m=int(((f-h)*60))
    s=int((f-h-m/60)*3600)
    print('{0}.{1:02d}\'{2:02d}"'.format(h,m,s))

------------------------------>>./Codeeval/87.py<<------------------------------
# Very Cool Code
import sys

matrix=[[0 for i in range(256)] for i in range(256)]


def SetRow(matrix,x):
    matrix[x[0]]=[x[1] for i in range(256)]

def SetCol(matrix,x):
    for i in matrix:
        i[x[0]]=x[1]

def QueryRow(matrix,x):
    print(sum(matrix[x[0]]))

def QueryCol(matrix,x):
    s=0
    for i in matrix:
        s=s+i[x[0]]
    print(s)


with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

dic={
    'SetCol':SetCol,'SetRow':SetRow,
    'QueryCol':QueryCol,'QueryRow':QueryRow
    }
for test in test_cases:
    z=[int(x) if x.isdigit() else x for x in test.split()]
    x=z[1:]
    r=z[0]
    dic.get(r)(matrix,x)

----------------------------->>./Codeeval/106.py<<------------------------------
import sys

values = {
    1: 'I',
    2: 'II',
    3: 'III',
    4: 'IV',
    5: 'V',
    6: 'VI',
    7: 'VII',
    8: 'VIII',
    9: 'IX',
    10: 'X',
    20: 'XX',
    30: 'XXX',
    40: 'XL',
    50: 'L',
    60: 'LX',
    70: 'LXX',
    80: 'LXXX',
    90: 'XC',
    100: 'C',
    200: 'CC',
    300: 'CCC',
    400: 'CD',
    500: 'D',
    600: 'DC',
    700: 'DCC',
    800: 'DCCC',
    900: 'CM',
    1000: 'M',
    2000: 'MM',
    3000: 'MMM',
    3000: 'MMM'
}

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=int(test)
    l=[]
    for i in sorted(values.keys(),reverse=True):
        if i<=k:
            if k%i==0:
                l.append(values.get(i))
                break
            else:
                k=k%i
                l.append(values.get(i))
    print(''.join(l))

------------------------------>>./Codeeval/39.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    box, num, happy=[],int(test),1
    while num!=1:
        num=sum([int(i)**2 for i in str(num)])
        if num in box:
            happy=0
            break
        else:
            box.append(num)
    print(happy)

----------------------------->>./Codeeval/140.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    sen, num=test.split(';')
    sen=sen.split()
    num=[int(i) for i in num.split()]
    l=list(sen)
    # l=sen.copy() in ver 3.4
    x=0
    last_num=[i for i in range(1,len(sen)+1) if i not in num]
    num.extend(last_num)
    for i in num:
        l[i-1]=sen[x]
        x=x+1
    print(' '.join(l))

----------------------------->>./Codeeval/218.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:


------------------------------>>./Codeeval/18.py<<------------------------------
import sys

def multi2(x,n):
    for i in range(x+1):
        if n*i>x:
            return n*i

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    x,n=test.split(',')
    x,n=int(x), int(n)
    print(multi2(x,n))

------------------------------>>./Codeeval/19.py<<------------------------------
import sys
def bit_pos(x,y,z):
    k=bin(x)
    if k[y]==k[z]:
        return True

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    x,y,z=test.split(',')
    x,y,z=int(x),-int(y),-int(z)
    if bit_pos(x,y,z):
        print('true')
    else:
        print('false')

----------------------------->>./Codeeval/156.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    s=1
    x=''
    for i in test:
        if i.isalpha():
            if s==1:
                x=x+i.capitalize()
                s=0
            else:
                x=x+i.lower()
                s=1
        else:
            x=x+i
    print(x)


----------------------------->>./Codeeval/104.py<<------------------------------
import sys

digits = {
    'zero': 0,
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5,
    'six': 6,
    'seven': 7,
    'eight': 8,
    'nine': 9
}

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=[str(digits.get(i)) for i in test.split(';')]
    print(''.join(k))

----------------------------->>./Codeeval/166.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()
    '''
	hours = int(numberOfSeconds / 3600)
	minutes = int(numberOfSeconds / 60) % 60
	seconds = numberOfSeconds % 60
	'''


def time_diff(gap_sec):
    h=int(gap_sec/3600)
    m=int((gap_sec-h*3600)/60)
    s=int(gap_sec-h*3600-m*60)
    return '{:02d}:{:02d}:{:02d}'.format(h, m, s)
for test in test_cases:
    r,t=test.split()
    x1,y1,z1=[int(i) for i in r.split(':')]
    x2,y2,z2=[int(i) for i in t.split(':')]
    x1=x1*3600
    x2=x2*3600
    y1=y1*60
    y2=y2*60
    gap_sec=(x2+y2+z2)-(x1+y1+z1)
    print(time_diff(abs(gap_sec)))

------------------------------>>./Codeeval/1.py<<-------------------------------
def word(x,y,z):
    sol=[]
    for i in range(1,z+1):

        if i%x==0:
            if i%y==0:
                s='FB'
                sol.append(s)
            else:
                s='F'
                sol.append(s)
        elif i%y==0:
            sol.append('B')
        else:
            sol.append(i)
    return sol

import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    fizz, buzz, limit = (int(i) for i in test.split())
    z=word(fizz, buzz, limit)
    for i in z:
        print(i,end=' ')
    print('')

----------------------------->>./Codeeval/152.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    age=int(test)
    if age in range(0,3):
        print("Still in Mama's arms")
    elif age in range(3,5):
        print("Preschool Maniac")
    elif age in range(5,12):
        print("Elementary school")
    elif age in range(12,15):
        print("Middle school")
    elif age in range(15,19):
        print("High school")
    elif age in range(19,23):
        print("College")
    elif age in range(23,66):
        print("Working for the man")
    elif age in range(66,101):
        print("The Golden Years")
    else:
        print("This program is for humans")


------------------------------>>./Codeeval/22.py<<------------------------------
def fibonacci(x):
    if x==0:
        return 0
    elif x==1:
        return 1
    else:
        y=fibonacci(x-1)+fibonacci(x-2)
        return y

import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    x=int(test)
    print(fibonacci(x))

------------------------------>>./Codeeval/83.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    dic={}
    t=test.lower()
    t=''.join(i for i in t if i.isalpha())
    k=set(t)
    for i in k:
        dic[i]=t.count(i)
        lis=sorted(dic.values(), reverse=True)
    m=[]
    x=26
    for j in lis:
        m.append(j*x)
        x=x-1
    print(sum(m))

----------------------------->>./Codeeval/112.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    number, swap=test.split(':')
    number=[int(i) for i in number.split()]
    swap=[i for i in swap.split(',')]
    for i in swap:
        x,y=i.split('-')
        x,y=int(x), int(y)
        number[x], number[y]=number[y], number[x]
    print(' '.join([str(i) for i in number]))

------------------------------>>./Codeeval/29.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=sorted(set([int(i) for i in test.split(',')]))
    print(','.join([str(i) for i in k]))

----------------------------->>./Codeeval/132.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=test.split(',')
    t=set(k)
    for i in t:
        if k.count(i)>len(k)/2:
            TME=i
            break
        else:
            TME='None'
    print(TME)

------------------------------>>./Codeeval/24.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()
x=0
for test in test_cases:
    x=x+int(test)
print(x)

----------------------------->>./Codeeval/147.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()


for test in test_cases:
    u=l=0
    t=len(test)
    for k in test:
        if k.isupper():
            u=u+1
        else:
            l+=1
    up=round((u/t)*100,2)
    lp=round((l/t)*100,2)
    print('lowercase: %.2f uppercase: %.2f'%(lp,up))

------------------------------>>./Codeeval/3.py3<<------------------------------
# palindrome
import math
def palindrome_dgt(d):
    if str(d)==str(d)[::-1]:
        return True

def prime():
    prime=[]
    for  i in range(2,1000):
        r=int(math.sqrt(i))+1
        for j in range(2,r+1):
            if i%j==0:
                break
            elif i%j!=0 and j==r:
                prime.append(i)
    z=0
    for i in prime:
        if palindrome_dgt(i):
            z=i
    print(z)
prime()

------------------------------>>./Codeeval/31.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    r,t=test.split(',')
    print(r.rfind(t))

------------------------------>>./Codeeval/4.py<<-------------------------------
# By Sieve of Eratosthenes
Till=8000
def prime(Till):
    primes=[True for i in range(Till)]
    primes[0]=primes[1]=False
    for i in range(1, int(Till ** .5 + 1)):
        if primes[i]:
            for j in range(i**2, Till, i):
                primes[j]=False
    return primes

k=prime(Till)
z=0
a=[]
h=1000
for i in range(Till):
    if k[i]:
        a.append(i)
print(sum(a[0:1000]))


----------------------------->>./Codeeval/103.py<<------------------------------
# Coool Code
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=[int(i) for i in test.split()]
    s=set(k)
    d={}
    for i in s:
        d[i]=k.count(i)
    x=[int(i) for i in d.keys() if d[i]==1]
    print(k.index(min(x))+1 if x else 0)

------------------------------>>./Codeeval/91.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    l=[float(i) for i in test.split()]
    x=sorted(l)
    print(' '.join(['%.3f' %i for i in x]))
#   print(' '.join(['{:.3f}'.format(i) for i in x]))


------------------------------>>./Codeeval/21.py<<------------------------------
def sum_d(d):
    k=[int(i) for i in str(d)]
    z=sum(k)
    return z

import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    print(sum_d(test))

------------------------------>>./Codeeval/20.py<<------------------------------



import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    print(test.lower())

----------------------------->>./Codeeval/124.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    sol,distance=[],[]
    k=test.split(';')[:-1]
    for i in k:
        x,y=i.split(',')
        distance.append(int(y))
    l=sorted(distance)
    r=0
    for i in l:
        s=i-r
        sol.append(s)
        r=i
    print(','.join(str(i) for i in sol))


------------------------------>>./Codeeval/8.py<<-------------------------------
import sys

def reverse_sentance(sen):
    s=sen.split()
    sr=s[::-1]
    return sr

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    c=reverse_sentance(test)
    for i in c:
        print(i,end=' ')
    print('')

----------------------------->>./Codeeval/131.py<<------------------------------
# Cool Regex
import sys
import re

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    d,w=test.split()
    regex=re.compile('([a-z]+)(\+|\-)([a-z]+)')
    x,op,z=re.findall(regex,w)[0]
    a,b=int(d[:len(x)]),int(d[len(x):])
    print(a+b if op=='+' else a-b)

# Collapse Code
"""    if w.find('+'):
        x,y,z=w.partition('+')
        print(x,y,z)
    elif w.find('-'):
        x,y,z=w.partition('-')
    z=dict(zip(i,d))
    a,s='',''
    ck=0
    for i in w:
        while not ck:
            if i.isalpha():
                a=a+i
                break
            else:
                ck=1
                op=i
                break
            break
        s=s+i
    for i in w:
        a=a+z.get(i)
    for i in w:
        s=s+z.get(i)
    if y=='+':
        print(int(a)+int(s))
    else:
        print(int(a)-int(s))
"""

----------------------------->>./Codeeval/122.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=dict(zip('abcdefghij',range(10)))
    k.update(dict(zip('0123456789',range(10))))
    l=[]
    for i in test:
        if i in k.keys():
            l.append(i)
        elif i.isdigit():
            l.append(i)
    z=[str(k.get(i)) for i in l]
    print(''.join(z) if z else 'NONE')

----------------------------->>./Codeeval/116.py<<------------------------------
# Morse Code
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()
code = {
    'A': '.-',
    'B': '-...',
    'C': '-.-.',
    'D': '-..',
    'E': '.',
    'F': '..-.',
    'G': '--.',
    'H': '....',
    'I': '..',
    'J': '.---',
    'K': '-.-',
    'L': '.-..',
    'M': '--',
    'N': '-.',
    'O': '---',
    'P': '.--.',
    'Q': '--.-',
    'R': '.-.',
    'S': '...',
    'T': '-',
    'U': '..-',
    'V': '...-',
    'W': '.--',
    'X': '-..-',
    'Y': '-.--',
    'Z': '--..',
    '0': '-----',
    '1': '.----',
    '2': '..---',
    '3': '...--',
    '4': '....-',
    '5': '.....',
    '6': '-....',
    '7': '--...',
    '8': '---..',
    '9': '----.',
    '.': '.-.-.-',
    ',': '--..--'
}

morse_code = dict(zip(code.values(), code.keys()))
for test in test_cases:
    words= [w for w in test.split('  ')]
    for word in words:
        print(''.join(morse_code[i] for i in word.split()), end=' ')
    print('')

----------------------------->>./Codeeval/115.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    t=test.split(',')
    w=[]
    d=[]
    for i in t:
        if i.isalpha():
            w.append(i)
        elif i.isdigit():
            d.append(i)
    if w and d:
        print(','.join(w) + '|' + ','.join(d))
    elif w:
        print(','.join(w))
    elif d:
        print(','.join(d))

------------------------------>>./Codeeval/92.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=test.split()
    print(k[-2])

------------------------------>>./Codeeval/82.py<<------------------------------
import sys



with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=sum([int(i)**len(test) for i in test])
    if k==int(test):
        print('True')
    else:
        print('False')

----------------------------->>./Codeeval/111.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    t=[i for i in test.split()]
    l=['junk',0]
    for i in t:
        if len(i)>l[1]:
            l=[i,len(i)]
    print(l[0])

----------------------------->>./Codeeval/167.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    if len(test) <=55:
        print(test)
    else:
        i=40
        for r in range(39,-1,-1):
            if test[r].isspace():
                i=r
                break
            else:
                i=40

        k=test[0:i].strip()
        k=k+'... <Read More>'
        print(k)


------------------------------>>./Codeeval/93.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=test.split()
    print(' '.join(i[0].capitalize() + i[1:] for i in k))

----------------------------->>./Codeeval/102.py<<------------------------------
import sys
import re

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    k=sum([int(i) for i in re.findall('id": (\d+), "label"',test)])
    print(k)

------------------------------>>./Codeeval/23.py<<------------------------------
"""
1   2   3   4   5   6   7   8   9  10  11  12
2   4   6   8  10  12  14  16  18  20  22  24
3   6   9  12  15  18  21  24  27  30  33  36
"""
def Mux_Tbl(d):
    for i in range(1,d+1):
        for j in range(1,d+1):
            x=i*j
            print(' '*(4-len(str(x)))+str(x),end='')
        print('')
Mux_Tbl(12)


------------------------------>>./Codeeval/97.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    name, num=test.split('|')
    num=[int(i) for i in num.split()]
    print(''.join([str(name[i-1]) for i in num]))
"""
    l=[]
    for i in num:
        print(name[i-1])

        l.append(name[i-1])
    z=''
    f=1
    for i in l:
        if i.istitle():
            z+=' '+i
        elif i.islower():
            z+=i
        elif i.isdigit() and f:
            z+=' '+i
        else:
            z+=i
    print(z)
"""

------------------------------>>./Codeeval/62.py<<------------------------------
import sys



with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    x,y=[int(i) for i in test.split(',')]
    print(x-(x//y)*y)

----------------------------->>./Codeeval/128.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    l=[]
    k=[int(i) for i in test.split()]
    count=1
    start=1
    prev=int
    for i in k:
        if prev==i:
            count=count+1
        elif start:
            start=0
        else:
            l.extend([count,prev])
            count=1
        prev=i
    l.extend([count,prev])
    print(' '.join([str(i) for i in l]))

------------------------------>>./Codeeval/25.py<<------------------------------
import sys
import os
print(os.path.getsize(sys.argv[1]))

------------------------------>>./Codeeval/96.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    print(test.swapcase())

----------------------------->>./Codeeval/113.py<<------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:
    l1, l2=test.split('|')
    l1=[int(i) for i in l1.split()]
    l2=[int(i) for i in l2.split()]
    res=[0 for i in l1]
    for i in range(len(l1)):
        res[i]=l1[i]*l2[i]
    print(' '.join(str(i) for i in res))

--------------------------------->>./fact.py<<----------------------------------
t=int(input())
for i in range(t):
    r=input()
    k=input().strip().split()
    print(k)

----------------------------------->>./1.py<<-----------------------------------
import sys

with open(sys.argv[1], 'r') as input:
    test_cases = input.read().strip().splitlines()

for test in test_cases:

--------------------->>./Text_Files_Concatinator V_0.3.py<<---------------------
""" Often We Have Many File Of text and we want them all in to one file,
This is the Thing You Were Looking For"""
#Program Released Under BSD Licence
#Created By Mr.4x3 And May Be Distributed Any Further But With Some Credit
#If Any Bug Found Please Mail At: Mr4x3@doyl.in
#So To Use It Just Put This File File In The Directry Where You Want To
#Concatinate
#It Means Source Of The Files

ver = .3

import os

Texo=1
Texography='This is Generated By Text File Concatinator V{} By Mr.4x3 \n \
Get Latest of this Script at http://doyl.in/scripts'.format(ver)

def ReadWrite(input_file, output_file='{}_Mr.4x3.TxT'.format(os.getcwd().split(os.sep)[-1])):
    """Write Given Input File To To A Give File"""
    global Texo
    if Texo==1:
        with open(input_file,'w') as inf:
            ix=inf.write(Texography)
        Texo=0
    with open(input_file) as inf:
        ix = inf.read()
        with open(output_file, 'a') as opf:
            line = '------->>'+input_file+'<<-------'
            opf.write('\n'+line.center(80, '-')+'\n')
            opf.write(ix)


def FileThrow(directry):
    """List All Files In The Given Directry, And Directry After That"""
    lis = os.listdir(directry)
    for i in lis:
        if os.path.isdir(i):
            FileThrow('./'+i+'/')
        else:
            arr.append(directry+i)
    return arr

di = input('Tell The Directry From Where you Want to Start, \n Or \
Should I Start \n \
From Here '+os.getcwd()+' "Y" for Current Working Directry:> ').lower()
if di == 'y':
    di = './'
arr = []
FT = FileThrow(di)
for i in FT:
    try:
        ReadWrite(i)
    except:
        pass
print("I Think Its Beautifully Done Check Em' Out")

---------------------------------->>./cd.py<<-----------------------------------
t=int(input())

def odd_divisior(x,y):
    k=0
    z=0
    for i in range(x,y+1):
        for j in range(1,y+1):
            if i%j==0:
                k+=1
        if k%2==1:
            z=z+1
        k=0
    print(z)
for i in range(t):
    x,y=input().strip().split()
    odd_divisior(int(x),int(y))

-------------------------------->>./Reader.py<<---------------------------------
class Reader():
    def __init__(self, file):
        self.file=file
        self.f=open(self.file,'r')

    def close(self):
        self.f.close()
    def read(self):

        return self.f.read()

---------------------------->>./PyMistakes/pym1.py<<----------------------------
def foo(bar=[]):
    bar.append('\x55\x32\x34')
    return bar

print(foo())
print(foo())
print(foo())
print(foo()*3)
print(['baz']*3)

---------------------------->>./PyMistakes/pym2.py<<----------------------------
class A():
    x=1
class B(A):
    pass
class C(B):
    pass
B.x=2
A.x=3
print(A.x,B.x,C.x)

---------------------------->>./PyMistakes/pym3.py<<----------------------------
try:
    l = ["a", "b"]
    int(l[2])
except (ValueError, IndexError) as e:
    pass

---------------------------->>./PyMistakes/pym5.py<<----------------------------
x = 10
def foo2():
    print(x)
    x += 1
def foo():
    x=x+1 #same happen when list=list+list
    print(x)
foo2()

------------------------------->>./__init__.py<<--------------------------------
print('Workspace Module Imported')

--------------------------------->>./hola.py<<----------------------------------
print('hello')
k = input()
